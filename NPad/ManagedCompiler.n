using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace NPad
{
  /// <summary>
  /// Description of Compiler.
  /// </summary>
  public class ManagedCompiler: ICompiler
  {
      mutable nemerlePath : string;
      
      public Compile(fileName : FileInfo, log : TextWriter) : Assembly
      {
        def options = CompilationOptions();
        def manager = ManagerClass(options);

        unless (String.IsNullOrEmpty(nemerlePath))
          options.LibraryPaths ::= nemerlePath;
          
        manager.InitOutput(System.IO.TextWriter.Null);
        manager.MessageOccured += (_, msg) => log.WriteLine(msg);
        
        options.IgnoreConfusion = true;
        options.ProgressBar = false;
        options.Sources = [fileName.FullName];
        options.CompileToMemory = true;
        options.ColorMessages = false;
            
        def compile(_)
        {
          try
          {
            manager.Run();
          }
          catch
          {
            | _ is Recovery => ()
          }
        }

        // compiler crashes on default stack size
        def largeStackThread = Thread(compile, 5*IntPtr.Size*1024*1024);
            
        largeStackThread.Start();
        largeStackThread.Join();
            
        manager.GeneratedAssembly
      }
      
      public SetNemerlePath(path : string) : void
      {
      	nemerlePath = path;
      }
  }
}
