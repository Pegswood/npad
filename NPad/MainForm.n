using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Windows.Forms;

using ICSharpCode.TextEditor.Document;
using System.Reflection;

namespace NPad
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    mutable nemerlePath : string;
  
    mutable _isDirty : bool;
    isDirty : bool { get {_isDirty}; set {_isDirty = value; updateTitle()} }

    mutable _currentFileName : string;
    currentFileName : string { get {_currentFileName}; set {_currentFileName = value; updateTitle()} }
    
    public this()
    {
      InitializeComponent();

      initCompiler();
      initEditor();
      initFileBrowser();
    }

    initCompiler() : void 
    {
        def searchPaths = [@"%Nemerle%", @"%ProgramFiles%\Nemerle"];
        
        def isCorrectPath(path)
        {
            Directory.Exists(path) && File.Exists(Path.Combine(path, "ncc.exe"))
        }
        
        nemerlePath = searchPaths
          .Map(Environment.ExpandEnvironmentVariables)
          .FirstOrDefault(isCorrectPath);
        
        when (String.IsNullOrEmpty(nemerlePath))
          _ = MessageBox.Show(
                "Nemerle not found. Set Nemerle environment variable or install nemerle into Program Files\\Nemerle");
    }
    
    private initEditor() : void
    {
        codeEditor.Document.HighlightingStrategy = GetHighlightingStrategy();
        codeEditor.Document.DocumentChanged += (_, _) =>
        {
            isDirty = true;
        };
    }

    private initFileBrowser() : void
    {
        def snippetsCollection = SnippetCollection("Samples", "Samples");

        fileBrowser.Nodes.Clear();
        def collectionNode = fileBrowser.Nodes.Add(snippetsCollection.Title);
        def baseDirectory = AppDomain.CurrentDomain.BaseDirectory;

        snippetsCollection.ForEachFile(baseDirectory, file =>
        {
            def node = collectionNode.Nodes.Add(Path.GetFileNameWithoutExtension(file));
            node.ToolTipText = file;
            node.Tag = file;
        });

        collectionNode.Expand();
    }
  
    private fileBrowser_NodeMouseClick (_ : object,  e : System.Windows.Forms.TreeNodeMouseClickEventArgs) : void
    {
      match (e.Node.Tag :> string)
      {
        | null => ()
        | fileName => loadFile(fileName);
      }
    }
    
    loadFile(fileName : string) : void 
    {
        codeEditor.LoadFile(fileName);
        codeEditor.Document.HighlightingStrategy = GetHighlightingStrategy();
        currentFileName = fileName;
        isDirty = false;
    }

    updateTitle() : void 
    {
      def dirty = if (isDirty) "*" else "";
      
      def (fileName, separator) = match (currentFileName)
      {
        | null => ("", "")
        | path => (Path.GetFileName(path), " - ")
      }
      
      Text = $"$(dirty)$(fileName)$(separator)Nemerle Pad";
    }
    
    GetHighlightingStrategy() : IHighlightingStrategy 
    {
      HighlightingStrategyFactory.CreateHighlightingStrategy("C#");
    }
    
    private runToolStripMenuItem_Click (_ : object,  _ : System.EventArgs) : void
    {
      runCode();
    }
    
    runCode() : void
    {
      def (fileName, isTemp) = match (currentFileName)
      {
        | null => 
          (Path.GetTempFileName(), true);
        | some => (some, false)
      }
      
      def assemblyFullName = Assembly.GetExecutingAssembly().FullName;
      def domain = AppDomain.CreateDomain(assemblyFullName);
      
      try
      {
        codeEditor.SaveFile(fileName);
        
        unless (isTemp)
          isDirty = false;
        
        
        def runner = domain
          .CreateInstanceAndUnwrap(assemblyFullName, typeof(AppRunner).FullName) :> AppRunner;
        
        runner.Setup(nemerlePath, CompilerType.Managed);

        def result = runner.CompileAndRun(FileInfo(fileName));
        
        def logFileName = if (isTemp)
            "snippet.n"
          else
            Path.GetFileName(fileName);
        
        def escapedName = Regex.Escape(fileName);

        def result = Regex
          .Replace(result, $"^$(escapedName)", logFileName, RegexOptions.Multiline);
          
        outputTextBox.Text = result;
      }
      catch
      {
        | e =>
          outputTextBox.Text = e.ToString()
      }
      finally
      {
        AppDomain.Unload(domain);
        when (isTemp) File.Delete(fileName)
      }
    }
  }
}
